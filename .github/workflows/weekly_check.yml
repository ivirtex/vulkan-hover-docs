name: Weekly check
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight

jobs:
  check_for_updates:
    name: Check for Vulkan spec updates
    runs-on: ubuntu-latest
    outputs:
      should_run_gen: ${{ steps.version_compare.outputs.should_run_gen }}
      latest_version: ${{ steps.extract_spec_version.outputs.latest_version }}
    steps:
      - name: Checkout Vulkan-Docs repository
        uses: actions/checkout@v4
        with:
          repository: KhronosGroup/Vulkan-Docs
        
      - id: extract_spec_version
        name: Extract latest spec version
        run: |
          latest_version=$(grep -oP 'Vulkan \d+\.\d+\.\d+' ChangeLog.adoc | head -1 | awk '{print $2}')
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_OUTPUT
          echo "Latest Vulkan spec version: $LATEST_VERSION"

      - name: Checkout current repository
        uses: actions/checkout@v4
      
      - id: version_compare
        name: Compare with stored version
        env: 
          LATEST_VERSION: ${{ steps.extract_spec_version.outputs.LATEST_VERSION }}
        run: |
          if [ -f vscode_extension/docs/.last_update ]; then
            LAST_VERSION=$(cat vscode_extension/docs/.last_update)
          else
            LAST_VERSION=""
          fi

          echo "Last stored version: $LAST_VERSION"
          echo "Latest version: $LATEST_VERSION"

          if [ "$LAST_VERSION" != "$LATEST_VERSION" ]; then
            echo "Current Vulkan spec version is different from the last stored version."
            echo "should_run_gen=true" >> $GITHUB_OUTPUT
          else
            echo "No new Vulkan spec version found."
            echo "should_run_gen=false" >> $GITHUB_OUTPUT
          fi

  build_docs_generator:
    name: Build docs_generator
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docs_generator
    needs: check_for_updates
    if: needs.check_for_updates.outputs.should_run_gen == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install dependencies
        run: go get .

      - name: Build docs_generator
        run: go build -o docs_generator

      - name: Upload docs_generator binary
        uses: actions/upload-artifact@v4
        with:
          name: docs_generator_binary
          path: docs_generator/docs_generator
        
  run_docs_generator:
    name: Run docs_generator and commit changes
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to the repository
      pull-requests: write  # Allow creating pull requests
    needs: [check_for_updates, build_docs_generator]
    if: needs.check_for_updates.outputs.should_run_gen == 'true'
    env:
      LATEST_VERSION: ${{ needs.check_for_updates.outputs.latest_version }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download docs_generator binary
        uses: actions/download-artifact@v4
        with:
          name: docs_generator_binary
          path: docs_generator

      - name: Make docs_generator executable
        run: chmod +x docs_generator/docs_generator

      - name: Run docs_generator
        run: ./docs_generator/docs_generator generate https://registry.khronos.org/vulkan/specs/latest/man/html/ --path vscode_extension/docs

      - name: Delete docs_generator binary
        run: rm -r docs_generator

      - name: Save latest spec version
        run: echo $LATEST_VERSION > vscode_extension/docs/.last_update

      - name: Bump version in package.json
        run: |
          cd vscode_extension
          npm version minor --no-git-tag-version
          echo "New version: $(jq -r .version package.json)"

      - name: Update CHANGELOG.md
        run: |
          cd vscode_extension
          version=$(jq -r .version package.json)
          date=$(date '+%Y-%m-%d')
          changelog="- Updated documentation to version $LATEST_VERSION"
          tmpfile=$(mktemp)
          { head -n 1 CHANGELOG.md; echo "## $version - $date"; echo "$changelog"; tail -n +2 CHANGELOG.md; } > "$tmpfile"
          mv "$tmpfile" CHANGELOG.md

      - name: Commit changes
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git switch -c update-vulkan-docs
          git add --all
          git commit -m "Update Vulkan documentation to version $LATEST_VERSION" || echo "No changes to commit"
          git push origin update-vulkan-docs --force

      - name: Create pull request
        run: gh pr create
          --title "Update Vulkan documentation to version $LATEST_VERSION"
          --body "This PR automically updates the Vulkan documentation to version $LATEST_VERSION."
          --base master
          --head update-vulkan-docs
          --label "documentation"
      